import java.sql.*;
import java.util.*;
import java.sql.Date;

class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/vasanth";
    private static final String USER = "root";
    private static final String PASSWORD = "vasanth@47";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}

class Student {
     int studentId;
     String name;
     int courseId;

    public Student(String name, int courseId) {
        this.name = name;
        this.courseId = courseId;
    }

    public int getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public int getCourseId() {
        return courseId;
    }
}

class Instructor {
     int instructorId;
     String name;
     String department;

    public Instructor(int instructorId, String name, String department) {
        this.instructorId = instructorId;
        this.name = name;
        this.department = department;
    }

    public int getInstructorId() {
        return instructorId;
    }

    public String getName() {
        return name;
    }

    public String getDepartment() {
        return department;
    }
}

class Course {
    int courseId;
    String title;
    String description;
    int instructorId;
    java.sql.Date startDate;
    java.sql.Date endDate;

    public Course(int courseId, String title, String description, int instructorId, java.sql.Date startDate, java.sql.Date endDate) {
        this.courseId = courseId;
        this.title = title;
        this.description = description;
        this.instructorId = instructorId;
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public int getCourseId() {
        return courseId;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getInstructorId() {
        return instructorId;
    }

    public java.sql.Date getStartDate() {
        return startDate;
    }

    public java.sql.Date getEndDate() {
        return endDate;
    }
}

class CourseDAO {
    public void addCourse(Course course) throws SQLException {
        String sql = "INSERT INTO Courses (course_id, title, description, instructor_id, start_date, end_date) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, course.getCourseId());
            stmt.setString(2, course.getTitle());
            stmt.setString(3, course.getDescription());
            stmt.setInt(4, course.getInstructorId());
            stmt.setDate(5, course.getStartDate());
            stmt.setDate(6, course.getEndDate());
            stmt.executeUpdate();
        }
    }

    public void getCourseDetails() throws SQLException {
        String sql = "SELECT Courses.title, Instructors.name AS instructor_name, Students.name AS student_name " +
                "FROM Courses " +
                "JOIN Instructors ON Courses.instructor_id = Instructors.instructor_id " +
                "JOIN Students ON Courses.course_id = Students.course_id";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                String courseTitle = rs.getString("title");
                String instructorName = rs.getString("instructor_name");
                String studentName = rs.getString("student_name");
                System.out.println("Course: " + courseTitle + ", Instructor: " + instructorName + ", Student: " + studentName);
            }
        }
    }
}

/*class InstructorDAO {
    public void addInstructor(Instructor instructor) throws SQLException {
        String sql = "INSERT INTO Instructors (instructor_id, name, department) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, instructor.getInstructorId());
            stmt.setString(2, instructor.getName());
            stmt.setString(3, instructor.getDepartment());
            stmt.executeUpdate();
        }
    }
}*/

class StudentDAO {
    public void addStudent(Student student) throws SQLException {
        String sql = "INSERT INTO Students (name, course_id) VALUES (?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, student.getName());
            stmt.setInt(2, student.getCourseId());
            stmt.executeUpdate();
            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    student.studentId = generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Creating student failed, no ID obtained.");
                }
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            Scanner scanner = new Scanner(System.in);

            CourseDAO courseDAO = new CourseDAO();
            //InstructorDAO instructorDAO = new InstructorDAO();
            StudentDAO studentDAO = new StudentDAO();

           String[] instructorNames = {"Dr. John Smith", "Prof. Jane Doe", "Dr. Emily Davis", "Dr. Michael Brown", "Prof. Linda Wilson"};
            List<Integer> instructorIds = new ArrayList<>();
            int p = 1; // To store generated instructor_ids
            for (String instructorName : instructorNames) {
                String[] parts = instructorName.split(" ");
                Instructor newInstructor = new Instructor(p, instructorName, "Computer Science");

                int instructorId = newInstructor.getInstructorId();
                instructorIds.add(instructorId);
                p++;
            }

            Course[] courses = {
                    new Course(111, "Introduction to Java", "Learn the basics of Java programming.", instructorIds.get(0), Date.valueOf("2024-06-01"), Date.valueOf("2024-12-01")),
                    new Course(112, "Advanced Java", "Deep dive into Java programming.", instructorIds.get(1), Date.valueOf("2024-07-01"), Date.valueOf("2024-12-01")),
                    new Course(113, "Data Structures", "Learn about various data structures.", instructorIds.get(2), Date.valueOf("2024-06-15"), Date.valueOf("2024-11-15")),
                    new Course(114, "Algorithms", "Understand algorithms and their complexities.", instructorIds.get(3), Date.valueOf("2024-06-20"), Date.valueOf("2024-12-20")),
                    new Course(115, "Database Systems", "Introduction to databases and SQL.", instructorIds.get(4), Date.valueOf("2024-07-01"), Date.valueOf("2024-12-01")),
                    new Course(116, "Web Development", "Learn to build web applications.", instructorIds.get(0), Date.valueOf("2024-07-15"), Date.valueOf("2024-12-15")),
                    new Course(117, "Mobile Development", "Create mobile applications.", instructorIds.get(1), Date.valueOf("2024-08-01"), Date.valueOf
                            ("2024-12-01")),
                    new Course(118, "Machine Learning", "Introduction to machine learning concepts.", instructorIds.get(2), Date.valueOf("2024-08-15"), Date.valueOf("2024-12-15")),
                    new Course(119, "Artificial Intelligence", "Learn about AI and its applications.", instructorIds.get(3), Date.valueOf("2024-09-01"), Date.valueOf("2024-12-01")),
                    new Course(120, "Cloud Computing", "Understand cloud services and deployment.", instructorIds.get(4), Date.valueOf("2024-09-15"), Date.valueOf("2024-12-15"))
            };


            System.out.println("Available courses:");
            for (int i = 0; i < courses.length; i++) {
                System.out.println((i + 1) + ". " + courses[i].getTitle() + " - " + courses[i].getDescription());
            }


            System.out.print("Enter the number of the course you want to choose: ");
            int choice = scanner.nextInt();


            if (choice < 1 || choice > courses.length) {
                System.out.println("Invalid choice.");
            } else {
                // Register the chosen course in the database
                Course chosenCourse = courses[choice - 1];
                int courseId = chosenCourse.getCourseId();
                courseDAO.addCourse(chosenCourse);
                System.out.println("Course registered successfully!");

                // Get the user's name
                scanner.nextLine(); // Consume newline
                System.out.print("Enter your name: ");
                String userName = scanner.nextLine();

                // Insert user details into Students table
                Student newStudent = new Student(userName, courseId);
                studentDAO.addStudent(newStudent);
                System.out.println("Student registered successfully!");
            }

            // Display course details
            System.out.println("Enter 1 for see details: ");
            if (scanner.nextInt() == 1) {
                courseDAO.getCourseDetails();
            }

            scanner.close();

        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
